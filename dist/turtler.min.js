require=function b(c,d,e){function a(h,i){if(!d[h]){if(!c[h]){var j="function"==typeof require&&require;if(!i&&j)return j(h,!0);if(g)return g(h,!0);var k=new Error("Cannot find module '"+h+"'");throw k.code="MODULE_NOT_FOUND",k}var f=d[h]={exports:{}};c[h][0].call(f.exports,function(b){var d=c[h][1][b];return a(d?d:b)},f,f.exports,b,c,d,e)}return d[h].exports}for(var g="function"==typeof require&&require,f=0;f<e.length;f++)a(e[f]);return a}({turtler:[function(a,b){b.exports=class{constructor(a,b={}){if(!Array.isArray(a))throw new Error("data should be an array of arrays");let{hasHeader:c=!0,columnSeparator:d=" | ",headerSeparator:e="="}=b;this.data=a,this.hasHeader=c,this.columnSeparator=d,this.headerSeparator=e}ascii(){const{data:a,hasHeader:b,columnSeparator:c,headerSeparator:d}=this;let e="",f=0,g=[];return a.forEach((a)=>{if(!Array.isArray(a))throw new Error("data should be an array of arrays");if(f||(f=a.length),f!==a.length)throw new Error("columns are not formed properly");a.forEach((a,b)=>{if("string"!=typeof a)throw new Error("column values should be strings");(!g[b]||g[b]<a.length)&&(g[b]=a.length)})}),a.forEach((a,f)=>{if(a=a.map((a,b)=>{let c=" ".repeat(g[b]-a.length);return a+c}).join(c),e+=`${a}\n`,0===f){if(!b||!d)return;e+=d[0].repeat(g.reduce((c,a)=>c+a)+c.length)+"\n"}}),e}markdown(){const{data:a,hasHeader:b=!0}=this;let c="",d=0,e=[];return a.forEach((a)=>{if(!Array.isArray(a))throw new Error("data should be an array of arrays");if(d||(d=a.length),d!==a.length)throw new Error("columns are not formed properly");a.forEach((a,b)=>{if("string"!=typeof a)throw new Error("column values should be strings");(!e[b]||e[b]<a.length)&&(e[b]=a.length)})}),a.forEach((a)=>{a=a.map((a,b)=>a+" ".repeat(e[b]-a.length)).join(" | "),c+=`| ${a} |\n`}),c}toString(){return this.ascii()}}},{}]},{},[]);